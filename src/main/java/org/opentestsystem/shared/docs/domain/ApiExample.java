/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.docs.domain;

import java.util.Comparator;

import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.http.HttpMethod;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
public class ApiExample implements Comparable<ApiExample> {

    private static final String LINE_BREAK = "\n";
    private static final int ZERO = 0;
    private static final int MINUS_ONE = -1;
    private static final int SB_INIT_SIZE = 80;

    private Integer apiDocRank;
    private HttpMethod requestMethod;
    private String requestContentType;
    private String requestUri;
    private String requestQueryString;
    private String requestData;
    private String responseContent;
    private int responseCode;

    public Integer getApiDocRank() {
        return apiDocRank;
    }

    public void setApiDocRank(final Integer inApiDocRank) {
        this.apiDocRank = inApiDocRank;
    }

    public HttpMethod getRequestMethod() {
        return requestMethod;
    }

    public void setRequestMethod(final HttpMethod inRequestMethod) {
        this.requestMethod = inRequestMethod;
    }

    public String getRequestContentType() {
        return requestContentType;
    }

    public void setRequestContentType(final String inRequestContentType) {
        this.requestContentType = inRequestContentType;
    }

    public String getRequestUri() {
        return requestUri;
    }

    public void setRequestUri(final String inRequestUri) {
        this.requestUri = inRequestUri;
    }

    public String getRequestQueryString() {
        return requestQueryString;
    }

    public void setRequestQueryString(final String inRequestQueryString) {
        this.requestQueryString = inRequestQueryString;
    }

    public String getRequestData() {
        return requestData;
    }

    public void setRequestData(final String inRequestData) {
        this.requestData = inRequestData;
    }

    public String getResponseContent() {
        return responseContent;
    }

    public void setResponseContent(final String contentAsString) {
        this.responseContent = contentAsString;
    }

    public int getResponseCode() {
        return responseCode;
    }

    public void setResponseCode(final int status) {
        this.responseCode = status;
    }

    @Override
    public String toString() {
        StringBuilder sbuilder = new StringBuilder(SB_INIT_SIZE);
        sbuilder.append("method: ");
        sbuilder.append(getRequestMethod());
        sbuilder.append(LINE_BREAK);
        sbuilder.append("ContentType: ");
        sbuilder.append(getRequestContentType());
        sbuilder.append(LINE_BREAK);
        sbuilder.append("Response Code: ");
        sbuilder.append(getResponseCode());
        sbuilder.append(LINE_BREAK);
        sbuilder.append("uri:");
        sbuilder.append(getRequestUri());
        sbuilder.append(LINE_BREAK);
        sbuilder.append("query string:");
        sbuilder.append(getRequestQueryString());
        sbuilder.append(LINE_BREAK);
        sbuilder.append("rank:");
        sbuilder.append(getApiDocRank());
        return sbuilder.toString();
    }

    @Override
    public int compareTo(final ApiExample obj) {
        if (obj == null) {
            return 1;
        } else {
            if (apiDocRank == null) {
                return obj.getApiDocRank() == null ? ZERO : MINUS_ONE;
            }
            int comparison = apiDocRank.compareTo(obj.apiDocRank);
            if (comparison == ZERO) {
                return compareTieBreaker(obj);
            } else {
                return comparison;
            }
        }
    }

    private int compareTieBreaker(final ApiExample obj) {
        if (requestMethod == null || obj.getRequestMethod() == null) {
            return 0;
        } else {
            int methodCompare = new HttpMethodComparator().compare(this.requestMethod, obj.requestMethod);
            if (methodCompare == ZERO) {
                // make the tie breaker the response code (lower/successful should come fist)
                return Integer.compare(responseCode, obj.responseCode);
            } else {
                return methodCompare;
            }
        }
    }

    private class HttpMethodComparator implements Comparator<HttpMethod> {

        private static final int NINTY_NINE = 99;
        private static final int FOUR = 4;
        private static final int THREE = 3;

        @Override
        public int compare(final HttpMethod obj1, final HttpMethod obj2) {
            return Integer.compare(getNumereicValue(obj1), getNumereicValue(obj2));
        }

        public int getNumereicValue(final HttpMethod method) {
            switch (method) {
            case POST:
                return 1;
            case PUT:
                return 2;
            case GET:
                return THREE;
            case DELETE:
                return FOUR;
            default: // we really don't care about the rest sort them to the bottom.
                return NINTY_NINE;
            }
        }
    }
}
